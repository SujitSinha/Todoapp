{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","item","setItem","initialData","localStorage","toDos","JSON","parse","data","setData","useEffect","stringify","a","document","getElementsByClassName","hasOwnProperty","innerHTML","replace","highlightText","className","onSubmit","e","preventDefault","content","submitted","visible","id","type","name","value","placeholder","onChange","target","Button","variant","color","onClick","forEach","toDo","size","map","lists","index","key","i","hashText","fullTodo","td","includes","splice","length","completed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PA6GeA,MAxGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAEPC,EAAcC,aAAaC,MAAQC,KAAKC,MAAMH,aAAaC,OAAS,GAF7D,EAGWL,mBAASG,GAHpB,mBAGNK,EAHM,KAGAC,EAHA,KA4Eb,OA5CAC,qBAAU,WACRN,aAAaC,MAAQC,KAAKK,UAAUH,GAftC,WAGE,IAAI,IAAII,KAAKC,SAASC,uBAAuB,SACvCD,SAASC,uBAAuB,SAASC,eAAeH,KAC1DC,SAASC,uBAAuB,SAASF,GAAGI,UAAaH,SAASC,uBAAuB,SAASF,GAAGI,UAAUC,QAAQ,YAA9D,uCAW7DC,MA2CA,yBAAKC,UAAU,QACb,yBAAKA,UAAU,OACf,0BAAMC,SApEW,SAACC,GACpBA,EAAEC,iBACFb,EAAQ,CAAC,CAACc,QAAQtB,EAAKuB,WAAU,EAAMC,SAAQ,IAAxC,mBAAiDjB,KACxDN,EAAQ,MAkEJ,2BAAOwB,GAAG,MAAMC,KAAK,OAAOC,KAAK,QAAQC,MAAO5B,EAC9C6B,YAAY,gBAAgBC,SA5Ef,SAACV,GACpBA,EAAEC,iBACFpB,EAAQmB,EAAEW,OAAOH,UA2Eb,kBAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYP,KAAK,SAASQ,MAAM,WAAhD,SAGF,yBAAKhB,UAAU,kBACf,kBAACc,EAAA,EAAD,CAAQC,QAAQ,YAAYE,QApBf,WAChB,IAAI/B,EAAM,YAAIG,GACdH,EAAMgC,SAAQ,SAAAC,GAAI,OAAEA,EAAKb,SAAU,KACnChB,EAAQJ,IAiB6C8B,MAAM,UAAUI,KAAK,QAAQpB,UAAU,iBAAzF,iBACCX,EAAKgC,KAAI,SAACC,EAAOC,GAChB,OACED,EAAMhB,SACN,wBAAIkB,IAAKD,EACRvB,UAAWsB,EAAMjB,UAAU,aAAc,QACzCY,QAAS,SAACf,IArDJ,SAACuB,EAAEvB,GAClB,GAAwB,cAArBA,EAAEW,OAAOb,UACX,CACC,IAAI0B,EAASxB,EAAEW,OAAOhB,UACjB8B,EAAS,YAAItC,GACjBsC,EAAST,SAAQ,SAACU,IAEbA,EAAGxB,QAAQyB,SAASH,IAAaE,EAAGtB,UAExCsB,EAAGtB,SAAU,MAGfhB,EAAQqC,OAMV,CACC,IAAIR,EAAI,YAAO9B,GACX8B,EAAKM,GAAGpB,YACZc,EAAKM,GAAGpB,WAAY,EACrBc,EAAKW,OAAOX,EAAKY,OAAO,EAAE,EAAEZ,EAAKW,OAAOL,EAAE,GAAG,IAC5CnC,EAAQ6B,KA8Bea,CAAUT,EAAMrB,KAC7BoB,EAAMlB,eCtFC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ff4714b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport Button from '@material-ui/core/Button';\n\nfunction App() {\n  const [item, setItem] = useState(\"\");\n  const initialData = localStorage.toDos ? JSON.parse(localStorage.toDos) : [];\n  const [data, setData] = useState(initialData);\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setItem(e.target.value);\n\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setData([{content:item,submitted:false,visible:true},...data]);\n    setItem(\"\");\n  }\n \n\n  function highlightText() {\n    let toDos = data;\n    \n    for(let a in document.getElementsByClassName('Todos')){\n      if( document.getElementsByClassName('Todos').hasOwnProperty(a)){\n        document.getElementsByClassName('Todos')[a].innerHTML = (document.getElementsByClassName('Todos')[a].innerHTML.replace(/#([^ ]+)/g, `<span class=\"highlight\">#$1</span>`));\n  }\n  }\n}\n\n\n\n\n\n  useEffect(() => {\n    localStorage.toDos = JSON.stringify(data);\n    highlightText();\n    \n  });\n  \n\n const completed=(i,e)=>{\n  if(e.target.className===\"highlight\")\n   {\n    let hashText=e.target.innerHTML;\n     var fullTodo=[...data];\n     fullTodo.forEach((td)=>\n     {\n      if(!td.content.includes(hashText) && td.visible)\n      { \n      td.visible = false;\n      }\n     }); \n    setData(fullTodo);\n     \n   }\n   else\n\n  \n  {\n   let toDo = [...data];\n   if(!toDo[i].submitted) {\n   toDo[i].submitted = true;\n  toDo.splice(toDo.length-1,0,toDo.splice(i,1)[0])\n   setData(toDo);\n   }\n   }\n }\n const clearFilter=()=>{\n   let toDos=[...data];\n   toDos.forEach(toDo=>toDo.visible = true);\n   setData(toDos);\n }\n\n\n\n\n\n  return (\n    <div className=\"body\">\n      <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input id=\"inp\" type=\"text\" name=\"input\" value={item}\n          placeholder=\"Type any Task\" onChange={handleChange} />\n        <Button variant=\"contained\" type=\"submit\" color=\"primary\">Add</Button>\n      </form>\n      </div>\n      <div className=\"list-container\"> \n      <Button variant=\"contained\" onClick={clearFilter} color=\"default\" size=\"small\" className=\"filter-button\"> Clear Filter</Button>\n      {data.map((lists, index) => {\n        return (   \n          lists.visible &&\n          <li key={index}\n           className={lists.submitted?'done Todos' :'Todos'} \n           onClick={(e)=>{completed(index,e)}}\n           >{lists.content}  \n          </li>\n          \n)\n      })} \n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}